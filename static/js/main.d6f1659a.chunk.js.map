{"version":3,"sources":["Components/Appointment/AppointmentItem.js","Components/Appointment/AppointmentForm.js","Components/Utils/AppointmentUtils.js","Components/Appointment/AppointmentComponent.js","App.js","serviceWorker.js","index.js"],"names":["AppointmentItem","props","react_default","a","createElement","title","time","AppointmentForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","value","setState","defineProperty","handleFocus","select","handleSubmit","preventDefault","onUserInput","state","setApptTime","input_appt_title","input_appt_time","onSubmit","type","placeholder","defaultValue","onChange","onFocus","DateTime_default","input","open","inputProps","Component","moment","require","defaultDatePicker","tomorrow","add","set","hour","get","minute","AppointmentComponent","handleUserInput","input_appointment","addAppointment","Appointment_AppointmentForm","appointments","map","appointment","Appointment_AppointmentItem","format","key","shortid","generate","App","prevState","concat","toConsumableArray","className","Appointment_AppointmentComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6f1659a.chunk.js","sourcesContent":["import React from 'react'; \nimport './AppointmentList.css';\nfunction AppointmentItem (props) {\n    return (\n        //<div className ='appointment-item'>\n        <div>\n             <h3>{props.title}</h3>\n             <p>{props.time}</p>\n        </div>\n    )\n}\n\nexport default AppointmentItem;","import React , {Component} from 'react'\nimport Datetime from 'react-datetime'\nclass AppointmentForm extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            input_appt_title: this.props.input_appt_title,\n            input_appt_time: this.props.input_appt_time,\n        }\n    } \n    handleChange = (event) => {\n        let {name, value} = event.target\n        this.setState({\n            [name]: value\n        })\n\n    }\n    \n    handleFocus = (event) => {\n        event.target.select();\n      }\n    \n    handleSubmit = (event) => {\n        event.preventDefault()\n        this.props.onUserInput(this.state)\n    }\n\n    setApptTime = (event) => {\n        let name = 'input_appt_time'\n        this.setState({\n            [name]: event\n        })\n    }\n\n    render() {\n        const inputProps = {\n            name: 'input_appt_time'\n        }\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n\n                    <input type =\"text\"\n                        name='input_appt_title' \n                        placeholder='Appointment Title' \n                        defaultValue= {this.state.input_appt_title}  \n                        onChange ={this.handleChange} onFocus={this.handleFocus} \n                     />\n                        <Datetime \n                            input = {true}\n                            open = {true}\n                            inputProps = {inputProps}\n                            defaultValue= {this.props.input_appt_time}\n                            onChange= {this.setApptTime}\n                        />\n\n                    <button>\n                        Make Appointment\n                    </button>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AppointmentForm","const moment = require('moment')\n\nconst defaultDatePicker = () => {\n    let tomorrow  = moment().add(1,'days'),\n        timeStr = '09:00',\n        time = moment(timeStr, 'HH:mm')\n\n        tomorrow.set({\n            hour:   time.get('hour'),\n            minute: time.get('minute')\n        })\n        return (tomorrow)\n}\n\nexport default defaultDatePicker","import React,  {Component} from 'react';\nimport AppointmentItem from './AppointmentItem'\nimport AppointmentForm from './AppointmentForm'\nimport defaultDatePicker from '../Utils/AppointmentUtils'\nimport shortid from 'shortid';\nimport './AppointmentList.css';\nclass AppointmentComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          input_appt_title : 'Team StandUp meeting',\n          input_appt_time: defaultDatePicker()\n        }\n    }\n\n    \n    handleUserInput = (input_appointment) => {\n        this.props.addAppointment(input_appointment)\n    }\n  \n    render () {\n        return (\n            <div>\n                <div >\n                    <AppointmentForm \n                    input_appt_title={this.state.input_appt_title} \n                    input_appt_time={this.state.input_appt_time} \n                    onUserInput = {this.handleUserInput}\n                    />\n                </div>\n                <div >\n                        {\n                            this.props.appointments.map(appointment => \n                                {\n                                    return ( \n                                    <AppointmentItem\n                                    title={appointment.input_appt_title} \n                                    time={appointment.input_appt_time.format(\"ddd, MMM Do YY, h:mm a\")} \n                                    key= {shortid.generate()}\n                                    />)\n                                }\n                            )\n                        }\n                </div>\n            </div>\n        ) \n    }\n\n}\n\nexport default AppointmentComponent;","import React, {Component} from 'react'\nimport AppointmentComponent from './Components/Appointment/AppointmentComponent'\nimport './App.css'\nclass App extends Component  {\n\n  constructor() {\n    super()\n    this.state = {\n      appointments : []\n    }\n  }\n\n  addAppointment = (appointment) => {\n    this.setState(prevState => { \n        return(\n          {\n            appointments: [...prevState.appointments, appointment]\n          }\n        ) \n        \n      })\n  }\n\n  render() {\n    return (\n      <div className = \"calendar-wrapper\">\n          <div className = \"calendar-block\">\n              <h3 className = \"calendar-title\"> Appointment Tracker</h3>\n              <p>Use the form  below to create and appointment</p>\n              <AppointmentComponent appointments = {this.state.appointments} addAppointment = {this.addAppointment} />\n        </div>\n      </div>\n    );\n  }\n}\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}